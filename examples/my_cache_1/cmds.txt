plot_mr_size.py command for Cloud Physics Traces

for i in {80..106};do name="w$i"; for algo in Lru Lru2Q TinyLFU all;do python3 plot_mr_size.py --output_folder=output/Cloud_Physics_Ws_reb_sleep --plot_folder=plots/Cloud_Physics --name="$name" --algo="$algo"; done; done

plot_mr_size.py command for other traces: 
for algo in all;do output_dir=output/Wiki2019t_reb; plot_dir=plots/Wiki2019t; python3 plot_mr_size.py --output_folder="$output_dir" --plot_folder="$plot_dir" --name="wiki2019t" --algo="$algo" --rebalance_strategies=default; done


plot_mr_time.py command for other traces: 
python3 plot_mr_time.py --output_folder=output/AkamaiLax_reb --plot_folder=plots/AkmS10 --name=akms10 --cache_size=all --rebalance_strategies=default


cmds for plotting all other traces:

for reb in all default; do 
output_dirs=(output/AkamaiLax_reb output/Cluster52_reb output/MetaKVT1_reb output/TencentP2S10_reb output/Wiki2019t_reb output/Wiki2019ts10_reb);  
plot_dirs=(plots/AkmS10 plots/Cluster52 plots/MetakvT1 plots/TncntP2S10 plots/Wiki2019t plots/Wiki2019tS10); 
names=(akms10 clstr52 metakvt1 tncntp2s10 wiki2019t wiki2019ts10); 
num_traces=${#output_dirs[@]}; 
for ((i=0;i<num_traces;i++)); do
output_folder=${output_dirs[$i]};plot_folder=${plot_dirs[$i]}; name=${names[$i]}; 
if [ "$reb" == "all" ]; then 
for algo in Lru Lru2Q TinyLFU;do 
echo "python3 plot_mr_time.py --output_folder=$output_folder --plot_folder=$plot_folder --name=$name --cache_size=all --algo=$algo --rebalance_strategies=$reb"; 
done; 
else 
echo "python3 plot_mr_time.py --output_folder=$output_folder --plot_folder=$plot_folder --name=$name --cache_size=all --algo=all --rebalance_strategies=$reb"; 
fi; 
done; 
done > tasks_plot



analyze rebalance strategies:
for reb in HitsPerSlab MarginalHits LruTailAge FreeMem;do 
python3 analyze_reb.py --output_folder=output/Cloud_Physics_Ws_reb/w06 --name=w06 --rebalance_strategies=$reb --summarize_cnt=yes --stdout_file=output/Cloud_Physics_Ws_reb/w06/"$reb"_best.txt; 
done

for cs in 256MB 512MB 1GB 2GB 4GB 8GB 16GB 32GB 64GB;do for algo in Lru Lru2Q TinyLFU; do f=wiki2019t_TinyLFU_64GB_MarginalHits*; mv wiki2019t_TinyLFU_64GB_MarginalHits* MarginalHits; done; done
for cs in 256MB 512MB 1GB 2GB 4GB 8GB 16GB 32GB 64GB;do for algo in Lru Lru2Q TinyLFU; do f=wiki2019t_TinyLFU_64GB_default*; mv wiki2019t_TinyLFU_64GB_MarginalHits* default; done; done



generate tasks for traces for parallel:

generate all Cloud Physics tasks file for parallel:
for i in {80..106};do data_path="data/w$i.oracleGeneral.bin.zst"; 

specifying rebParams:
while read -r line;do echo "./run.sh $data_path $name $algo $reb $line $output_dir";done < $rebParam_file; 

uniform object size:
for cs in 256MB 512MB 1GB 2GB 4GB 8GB 16GB 32GB 64GB;do 
data=data/meta_kvcache_traces_1.oracleGeneral.bin.zst;output_dir=output/MetaKVT1_reb_2;name=metakvt1; 
for algo in Sieve Lru Lru2Q TinyLFU; do 
for reb in LruTailAge MarginalHits HitsPerSlab default FreeMem;do 
echo "./run.sh $data $name $algo $reb default $output_dir $cs yes"; 
done; done; done > tasks/MetaKVT1_2_uniform

not uniform object size:
for cs in 256MB 512MB 1GB 2GB 4GB 8GB 16GB 32GB 64GB;do 
data=data/meta_kvcache_traces_1.oracleGeneral.bin.zst;output_dir=output/MetaKVT1_reb_2;name=metakvt1; 
for algo in Sieve Lru Lru2Q TinyLFU; do 
for reb in LruTailAge MarginalHits HitsPerSlab default FreeMem;do 
echo "./run.sh $data $name $algo $reb default $output_dir $cs"; 
done; done; done > tasks/MetaKVT1_2

build/testSieve 1 ../data/meta_kvcache_traces_1.oracleGeneral.bin.zst 242


for algo in Sieve Lru Lru2Q TinyLFU;do data=data/meta_kvcache_traces_1.oracleGeneral.bin.zst;output_dir=output/MetaKVT1_reb_2;name=metakvt1; while read -r line;do echo "./run.sh $data $name $algo HitsPerSlab $line $output_dir 4GB"; done < rebParams/HitsPerSlab_full; done > tasks/MetaKVT1_HPS_4GB_full