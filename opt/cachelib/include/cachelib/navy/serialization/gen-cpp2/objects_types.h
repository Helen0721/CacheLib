/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct key;
struct address;
struct sizeHint;
struct totalHits;
struct currentHits;
struct bucketId;
struct entries;
struct regionId;
struct lastEntryEndOffset;
struct classId;
struct numItems;
struct pinned;
struct priority;
struct regions;
struct regionSize;
struct idx;
struct trackTime;
struct queue;
struct totalHits;
struct currHits;
struct numReinsertions;
struct key;
struct stats;
struct deprecated_data;
struct data;
struct version;
struct cacheBaseOffset;
struct cacheSize;
struct allocAlignSize;
struct deprecated_sizeClasses;
struct checksum;
struct deprecated_sizeDist;
struct holeCount;
struct holeSizeTotal;
struct reinsertionPolicyEnabled;
struct usedSizeBytes;
struct version;
struct generationTime;
struct itemCount;
struct bucketSize;
struct cacheBaseOffset;
struct numBuckets;
struct deprecated_sizeDist;
struct usedSizeBytes;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_address
#define APACHE_THRIFT_ACCESSOR_address
APACHE_THRIFT_DEFINE_ACCESSOR(address);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sizeHint
#define APACHE_THRIFT_ACCESSOR_sizeHint
APACHE_THRIFT_DEFINE_ACCESSOR(sizeHint);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalHits
#define APACHE_THRIFT_ACCESSOR_totalHits
APACHE_THRIFT_DEFINE_ACCESSOR(totalHits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currentHits
#define APACHE_THRIFT_ACCESSOR_currentHits
APACHE_THRIFT_DEFINE_ACCESSOR(currentHits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bucketId
#define APACHE_THRIFT_ACCESSOR_bucketId
APACHE_THRIFT_DEFINE_ACCESSOR(bucketId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_entries
#define APACHE_THRIFT_ACCESSOR_entries
APACHE_THRIFT_DEFINE_ACCESSOR(entries);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regionId
#define APACHE_THRIFT_ACCESSOR_regionId
APACHE_THRIFT_DEFINE_ACCESSOR(regionId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastEntryEndOffset
#define APACHE_THRIFT_ACCESSOR_lastEntryEndOffset
APACHE_THRIFT_DEFINE_ACCESSOR(lastEntryEndOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_classId
#define APACHE_THRIFT_ACCESSOR_classId
APACHE_THRIFT_DEFINE_ACCESSOR(classId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numItems
#define APACHE_THRIFT_ACCESSOR_numItems
APACHE_THRIFT_DEFINE_ACCESSOR(numItems);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pinned
#define APACHE_THRIFT_ACCESSOR_pinned
APACHE_THRIFT_DEFINE_ACCESSOR(pinned);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_priority
#define APACHE_THRIFT_ACCESSOR_priority
APACHE_THRIFT_DEFINE_ACCESSOR(priority);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regions
#define APACHE_THRIFT_ACCESSOR_regions
APACHE_THRIFT_DEFINE_ACCESSOR(regions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regionSize
#define APACHE_THRIFT_ACCESSOR_regionSize
APACHE_THRIFT_DEFINE_ACCESSOR(regionSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_idx
#define APACHE_THRIFT_ACCESSOR_idx
APACHE_THRIFT_DEFINE_ACCESSOR(idx);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_trackTime
#define APACHE_THRIFT_ACCESSOR_trackTime
APACHE_THRIFT_DEFINE_ACCESSOR(trackTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queue
#define APACHE_THRIFT_ACCESSOR_queue
APACHE_THRIFT_DEFINE_ACCESSOR(queue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalHits
#define APACHE_THRIFT_ACCESSOR_totalHits
APACHE_THRIFT_DEFINE_ACCESSOR(totalHits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currHits
#define APACHE_THRIFT_ACCESSOR_currHits
APACHE_THRIFT_DEFINE_ACCESSOR(currHits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numReinsertions
#define APACHE_THRIFT_ACCESSOR_numReinsertions
APACHE_THRIFT_DEFINE_ACCESSOR(numReinsertions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stats
#define APACHE_THRIFT_ACCESSOR_stats
APACHE_THRIFT_DEFINE_ACCESSOR(stats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_deprecated_data
#define APACHE_THRIFT_ACCESSOR_deprecated_data
APACHE_THRIFT_DEFINE_ACCESSOR(deprecated_data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_version
#define APACHE_THRIFT_ACCESSOR_version
APACHE_THRIFT_DEFINE_ACCESSOR(version);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheBaseOffset
#define APACHE_THRIFT_ACCESSOR_cacheBaseOffset
APACHE_THRIFT_DEFINE_ACCESSOR(cacheBaseOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheSize
#define APACHE_THRIFT_ACCESSOR_cacheSize
APACHE_THRIFT_DEFINE_ACCESSOR(cacheSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_allocAlignSize
#define APACHE_THRIFT_ACCESSOR_allocAlignSize
APACHE_THRIFT_DEFINE_ACCESSOR(allocAlignSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_deprecated_sizeClasses
#define APACHE_THRIFT_ACCESSOR_deprecated_sizeClasses
APACHE_THRIFT_DEFINE_ACCESSOR(deprecated_sizeClasses);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_checksum
#define APACHE_THRIFT_ACCESSOR_checksum
APACHE_THRIFT_DEFINE_ACCESSOR(checksum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_deprecated_sizeDist
#define APACHE_THRIFT_ACCESSOR_deprecated_sizeDist
APACHE_THRIFT_DEFINE_ACCESSOR(deprecated_sizeDist);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_holeCount
#define APACHE_THRIFT_ACCESSOR_holeCount
APACHE_THRIFT_DEFINE_ACCESSOR(holeCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_holeSizeTotal
#define APACHE_THRIFT_ACCESSOR_holeSizeTotal
APACHE_THRIFT_DEFINE_ACCESSOR(holeSizeTotal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reinsertionPolicyEnabled
#define APACHE_THRIFT_ACCESSOR_reinsertionPolicyEnabled
APACHE_THRIFT_DEFINE_ACCESSOR(reinsertionPolicyEnabled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_usedSizeBytes
#define APACHE_THRIFT_ACCESSOR_usedSizeBytes
APACHE_THRIFT_DEFINE_ACCESSOR(usedSizeBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_version
#define APACHE_THRIFT_ACCESSOR_version
APACHE_THRIFT_DEFINE_ACCESSOR(version);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_generationTime
#define APACHE_THRIFT_ACCESSOR_generationTime
APACHE_THRIFT_DEFINE_ACCESSOR(generationTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_itemCount
#define APACHE_THRIFT_ACCESSOR_itemCount
APACHE_THRIFT_DEFINE_ACCESSOR(itemCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bucketSize
#define APACHE_THRIFT_ACCESSOR_bucketSize
APACHE_THRIFT_DEFINE_ACCESSOR(bucketSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheBaseOffset
#define APACHE_THRIFT_ACCESSOR_cacheBaseOffset
APACHE_THRIFT_DEFINE_ACCESSOR(cacheBaseOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numBuckets
#define APACHE_THRIFT_ACCESSOR_numBuckets
APACHE_THRIFT_DEFINE_ACCESSOR(numBuckets);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_deprecated_sizeDist
#define APACHE_THRIFT_ACCESSOR_deprecated_sizeDist
APACHE_THRIFT_DEFINE_ACCESSOR(deprecated_sizeDist);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_usedSizeBytes
#define APACHE_THRIFT_ACCESSOR_usedSizeBytes
APACHE_THRIFT_DEFINE_ACCESSOR(usedSizeBytes);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook::cachelib::navy::serialization {
class IndexEntry;
class IndexBucket;
class Region;
class RegionData;
class FifoPolicyNodeData;
class FifoPolicyData;
class AccessStats;
class AccessStatsPair;
class AccessTracker;
class BlockCacheConfig;
class BigHashPersistentData;
} // namespace facebook::cachelib::navy::serialization
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::cachelib::navy::serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class IndexEntry final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::key,
    ::apache::thrift::ident::address,
    ::apache::thrift::ident::sizeHint,
    ::apache::thrift::ident::totalHits,
    ::apache::thrift::ident::currentHits
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::byte_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndexEntry;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  IndexEntry() :
      __fbthrift_field_key(static_cast<::std::int32_t>(0)),
      __fbthrift_field_address(static_cast<::std::int32_t>(0)),
      __fbthrift_field_sizeHint(static_cast<::std::int16_t>(0)),
      __fbthrift_field_totalHits(static_cast<::std::int8_t>(0)),
      __fbthrift_field_currentHits(static_cast<::std::int8_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexEntry(apache::thrift::FragileConstructor, ::std::int32_t key__arg, ::std::int32_t address__arg, ::std::int16_t sizeHint__arg, ::std::int8_t totalHits__arg, ::std::int8_t currentHits__arg);

  IndexEntry(IndexEntry&&) noexcept;

  IndexEntry(const IndexEntry& src);


  IndexEntry& operator=(IndexEntry&&) noexcept;
  IndexEntry& operator=(const IndexEntry& src);
 private:
  ::std::int32_t __fbthrift_field_key;
 private:
  ::std::int32_t __fbthrift_field_address;
 private:
  ::std::int16_t __fbthrift_field_sizeHint;
 private:
  ::std::int8_t __fbthrift_field_totalHits;
 private:
  ::std::int8_t __fbthrift_field_currentHits;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndexEntry&) const;
  bool operator<(const IndexEntry&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> key_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_key};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> key_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_key)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> key_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_key};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> key_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_key)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> key() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_key};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> key() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_key)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> key() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_key};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> key() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_key)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> address_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_address};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> address_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_address)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> address_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_address};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> address_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_address)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> address() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_address};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> address() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_address)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> address() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_address};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> address() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_address)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sizeHint_ref() const& {
    return {this->__fbthrift_field_sizeHint, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sizeHint_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_sizeHint), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sizeHint_ref() & {
    return {this->__fbthrift_field_sizeHint, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sizeHint_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_sizeHint), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sizeHint() const& {
    return {this->__fbthrift_field_sizeHint, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sizeHint() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_sizeHint), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sizeHint() & {
    return {this->__fbthrift_field_sizeHint, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sizeHint() && {
    return {static_cast<T&&>(this->__fbthrift_field_sizeHint), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> totalHits_ref() const& {
    return {this->__fbthrift_field_totalHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> totalHits_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_totalHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> totalHits_ref() & {
    return {this->__fbthrift_field_totalHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> totalHits_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_totalHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> totalHits() const& {
    return {this->__fbthrift_field_totalHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> totalHits() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_totalHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> totalHits() & {
    return {this->__fbthrift_field_totalHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> totalHits() && {
    return {static_cast<T&&>(this->__fbthrift_field_totalHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> currentHits_ref() const& {
    return {this->__fbthrift_field_currentHits, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> currentHits_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_currentHits), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> currentHits_ref() & {
    return {this->__fbthrift_field_currentHits, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> currentHits_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_currentHits), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> currentHits() const& {
    return {this->__fbthrift_field_currentHits, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> currentHits() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_currentHits), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> currentHits() & {
    return {this->__fbthrift_field_currentHits, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> currentHits() && {
    return {static_cast<T&&>(this->__fbthrift_field_currentHits), __isset.at(2), __isset.bit(2)};
  }

  ::std::int32_t get_key() const {
    return __fbthrift_field_key;
  }

  [[deprecated("Use `FOO.key_ref() = BAR;` instead of `FOO.set_key(BAR);`")]]
  ::std::int32_t& set_key(::std::int32_t key_) {
    key_ref() = key_;
    return __fbthrift_field_key;
  }

  ::std::int32_t get_address() const {
    return __fbthrift_field_address;
  }

  [[deprecated("Use `FOO.address_ref() = BAR;` instead of `FOO.set_address(BAR);`")]]
  ::std::int32_t& set_address(::std::int32_t address_) {
    address_ref() = address_;
    return __fbthrift_field_address;
  }

  ::std::int16_t get_sizeHint() const {
    return __fbthrift_field_sizeHint;
  }

  [[deprecated("Use `FOO.sizeHint_ref() = BAR;` instead of `FOO.set_sizeHint(BAR);`")]]
  ::std::int16_t& set_sizeHint(::std::int16_t sizeHint_) {
    sizeHint_ref() = sizeHint_;
    return __fbthrift_field_sizeHint;
  }

  ::std::int8_t get_totalHits() const {
    return __fbthrift_field_totalHits;
  }

  [[deprecated("Use `FOO.totalHits_ref() = BAR;` instead of `FOO.set_totalHits(BAR);`")]]
  ::std::int8_t& set_totalHits(::std::int8_t totalHits_) {
    totalHits_ref() = totalHits_;
    return __fbthrift_field_totalHits;
  }

  ::std::int8_t get_currentHits() const {
    return __fbthrift_field_currentHits;
  }

  [[deprecated("Use `FOO.currentHits_ref() = BAR;` instead of `FOO.set_currentHits(BAR);`")]]
  ::std::int8_t& set_currentHits(::std::int8_t currentHits_) {
    currentHits_ref() = currentHits_;
    return __fbthrift_field_currentHits;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndexEntry>;
  friend void swap(IndexEntry& a, IndexEntry& b);
};

template <class Protocol_>
unsigned long IndexEntry::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class IndexBucket final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::bucketId,
    ::apache::thrift::ident::entries
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::cachelib::navy::serialization::IndexEntry>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndexBucket;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  IndexBucket();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexBucket(apache::thrift::FragileConstructor, ::std::int32_t bucketId__arg, ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry> entries__arg);

  IndexBucket(IndexBucket&&) noexcept;

  IndexBucket(const IndexBucket& src);


  IndexBucket& operator=(IndexBucket&&) noexcept;
  IndexBucket& operator=(const IndexBucket& src);

  ~IndexBucket();

 private:
  ::std::int32_t __fbthrift_field_bucketId;
 private:
  ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry> __fbthrift_field_entries;

 public:

  bool operator==(const IndexBucket&) const;
  bool operator<(const IndexBucket&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> bucketId_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_bucketId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> bucketId_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bucketId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> bucketId_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_bucketId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> bucketId_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bucketId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> bucketId() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_bucketId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> bucketId() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bucketId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> bucketId() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_bucketId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> bucketId() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bucketId)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> entries_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_entries};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> entries_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_entries)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> entries_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_entries};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> entries_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_entries)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> entries() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_entries};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> entries() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_entries)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> entries() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_entries};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> entries() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_entries)};
  }

  ::std::int32_t get_bucketId() const {
    return __fbthrift_field_bucketId;
  }

  [[deprecated("Use `FOO.bucketId_ref() = BAR;` instead of `FOO.set_bucketId(BAR);`")]]
  ::std::int32_t& set_bucketId(::std::int32_t bucketId_) {
    bucketId_ref() = bucketId_;
    return __fbthrift_field_bucketId;
  }
  const ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>& get_entries() const&;
  ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry> get_entries() &&;

  template <typename T_IndexBucket_entries_struct_setter = ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>>
  [[deprecated("Use `FOO.entries_ref() = BAR;` instead of `FOO.set_entries(BAR);`")]]
  ::std::vector<::facebook::cachelib::navy::serialization::IndexEntry>& set_entries(T_IndexBucket_entries_struct_setter&& entries_) {
    entries_ref() = std::forward<T_IndexBucket_entries_struct_setter>(entries_);
    return __fbthrift_field_entries;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndexBucket>;
  friend void swap(IndexBucket& a, IndexBucket& b);
};

template <class Protocol_>
unsigned long IndexBucket::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Region final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::regionId,
    ::apache::thrift::ident::lastEntryEndOffset,
    ::apache::thrift::ident::classId,
    ::apache::thrift::ident::numItems,
    ::apache::thrift::ident::pinned,
    ::apache::thrift::ident::priority
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Region;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Region() :
      __fbthrift_field_regionId(static_cast<::std::int32_t>(0)),
      __fbthrift_field_lastEntryEndOffset(static_cast<::std::int32_t>(0)),
      __fbthrift_field_classId(static_cast<::std::int32_t>(0)),
      __fbthrift_field_numItems(static_cast<::std::int32_t>(0)),
      __fbthrift_field_pinned(false),
      __fbthrift_field_priority(static_cast<::std::int32_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Region(apache::thrift::FragileConstructor, ::std::int32_t regionId__arg, ::std::int32_t lastEntryEndOffset__arg, ::std::int32_t classId__arg, ::std::int32_t numItems__arg, bool pinned__arg, ::std::int32_t priority__arg);

  Region(Region&&) = default;

  Region(const Region&) = default;


  Region& operator=(Region&&) = default;

  Region& operator=(const Region&) = default;
 private:
  ::std::int32_t __fbthrift_field_regionId;
 private:
  ::std::int32_t __fbthrift_field_lastEntryEndOffset;
 private:
  ::std::int32_t __fbthrift_field_classId;
 private:
  ::std::int32_t __fbthrift_field_numItems;
 private:
  bool __fbthrift_field_pinned;
 private:
  ::std::int32_t __fbthrift_field_priority;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Region&) const;
  bool operator<(const Region&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> regionId_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_regionId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> regionId_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_regionId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> regionId_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_regionId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> regionId_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_regionId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> regionId() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_regionId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> regionId() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_regionId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> regionId() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_regionId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> regionId() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_regionId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lastEntryEndOffset_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_lastEntryEndOffset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lastEntryEndOffset_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lastEntryEndOffset)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lastEntryEndOffset_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_lastEntryEndOffset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lastEntryEndOffset_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lastEntryEndOffset)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lastEntryEndOffset() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_lastEntryEndOffset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lastEntryEndOffset() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lastEntryEndOffset)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lastEntryEndOffset() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_lastEntryEndOffset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lastEntryEndOffset() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lastEntryEndOffset)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> classId_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_classId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> classId_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_classId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> classId_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_classId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> classId_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_classId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> classId() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_classId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> classId() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_classId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> classId() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_classId};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> classId() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_classId)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numItems_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_numItems};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numItems_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_numItems)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numItems_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_numItems};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numItems_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_numItems)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numItems() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_numItems};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numItems() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_numItems)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numItems() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_numItems};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numItems() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_numItems)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> pinned_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_pinned};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> pinned_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_pinned)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> pinned_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_pinned};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> pinned_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_pinned)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> pinned() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_pinned};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> pinned() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_pinned)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> pinned() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_pinned};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> pinned() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_pinned)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> priority_ref() const& {
    return {this->__fbthrift_field_priority, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> priority_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_priority), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> priority_ref() & {
    return {this->__fbthrift_field_priority, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> priority_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_priority), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> priority() const& {
    return {this->__fbthrift_field_priority, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> priority() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_priority), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> priority() & {
    return {this->__fbthrift_field_priority, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> priority() && {
    return {static_cast<T&&>(this->__fbthrift_field_priority), __isset.at(0), __isset.bit(0)};
  }

  ::std::int32_t get_regionId() const {
    return __fbthrift_field_regionId;
  }

  [[deprecated("Use `FOO.regionId_ref() = BAR;` instead of `FOO.set_regionId(BAR);`")]]
  ::std::int32_t& set_regionId(::std::int32_t regionId_) {
    regionId_ref() = regionId_;
    return __fbthrift_field_regionId;
  }

  ::std::int32_t get_lastEntryEndOffset() const {
    return __fbthrift_field_lastEntryEndOffset;
  }

  [[deprecated("Use `FOO.lastEntryEndOffset_ref() = BAR;` instead of `FOO.set_lastEntryEndOffset(BAR);`")]]
  ::std::int32_t& set_lastEntryEndOffset(::std::int32_t lastEntryEndOffset_) {
    lastEntryEndOffset_ref() = lastEntryEndOffset_;
    return __fbthrift_field_lastEntryEndOffset;
  }

  ::std::int32_t get_classId() const {
    return __fbthrift_field_classId;
  }

  [[deprecated("Use `FOO.classId_ref() = BAR;` instead of `FOO.set_classId(BAR);`")]]
  ::std::int32_t& set_classId(::std::int32_t classId_) {
    classId_ref() = classId_;
    return __fbthrift_field_classId;
  }

  ::std::int32_t get_numItems() const {
    return __fbthrift_field_numItems;
  }

  [[deprecated("Use `FOO.numItems_ref() = BAR;` instead of `FOO.set_numItems(BAR);`")]]
  ::std::int32_t& set_numItems(::std::int32_t numItems_) {
    numItems_ref() = numItems_;
    return __fbthrift_field_numItems;
  }

  bool get_pinned() const {
    return __fbthrift_field_pinned;
  }

  [[deprecated("Use `FOO.pinned_ref() = BAR;` instead of `FOO.set_pinned(BAR);`")]]
  bool& set_pinned(bool pinned_) {
    pinned_ref() = pinned_;
    return __fbthrift_field_pinned;
  }

  ::std::int32_t get_priority() const {
    return __fbthrift_field_priority;
  }

  [[deprecated("Use `FOO.priority_ref() = BAR;` instead of `FOO.set_priority(BAR);`")]]
  ::std::int32_t& set_priority(::std::int32_t priority_) {
    priority_ref() = priority_;
    return __fbthrift_field_priority;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Region>;
  friend void swap(Region& a, Region& b);
};

template <class Protocol_>
unsigned long Region::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class RegionData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::regions,
    ::apache::thrift::ident::regionSize
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::cachelib::navy::serialization::Region>>,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RegionData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  RegionData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RegionData(apache::thrift::FragileConstructor, ::std::vector<::facebook::cachelib::navy::serialization::Region> regions__arg, ::std::int32_t regionSize__arg);

  RegionData(RegionData&&) noexcept;

  RegionData(const RegionData& src);


  RegionData& operator=(RegionData&&) noexcept;
  RegionData& operator=(const RegionData& src);

  ~RegionData();

 private:
  ::std::vector<::facebook::cachelib::navy::serialization::Region> __fbthrift_field_regions;
 private:
  ::std::int32_t __fbthrift_field_regionSize;

 public:

  bool operator==(const RegionData&) const;
  bool operator<(const RegionData&) const;

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> regions_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_regions};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> regions_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_regions)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> regions_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_regions};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> regions_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_regions)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> regions() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_regions};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> regions() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_regions)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> regions() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_regions};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> regions() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_regions)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> regionSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_regionSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> regionSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_regionSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> regionSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_regionSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> regionSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_regionSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> regionSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_regionSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> regionSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_regionSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> regionSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_regionSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> regionSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_regionSize)};
  }
  const ::std::vector<::facebook::cachelib::navy::serialization::Region>& get_regions() const&;
  ::std::vector<::facebook::cachelib::navy::serialization::Region> get_regions() &&;

  template <typename T_RegionData_regions_struct_setter = ::std::vector<::facebook::cachelib::navy::serialization::Region>>
  [[deprecated("Use `FOO.regions_ref() = BAR;` instead of `FOO.set_regions(BAR);`")]]
  ::std::vector<::facebook::cachelib::navy::serialization::Region>& set_regions(T_RegionData_regions_struct_setter&& regions_) {
    regions_ref() = std::forward<T_RegionData_regions_struct_setter>(regions_);
    return __fbthrift_field_regions;
  }

  ::std::int32_t get_regionSize() const {
    return __fbthrift_field_regionSize;
  }

  [[deprecated("Use `FOO.regionSize_ref() = BAR;` instead of `FOO.set_regionSize(BAR);`")]]
  ::std::int32_t& set_regionSize(::std::int32_t regionSize_) {
    regionSize_ref() = regionSize_;
    return __fbthrift_field_regionSize;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RegionData>;
  friend void swap(RegionData& a, RegionData& b);
};

template <class Protocol_>
unsigned long RegionData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class FifoPolicyNodeData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::idx,
    ::apache::thrift::ident::trackTime
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FifoPolicyNodeData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FifoPolicyNodeData() :
      __fbthrift_field_idx(),
      __fbthrift_field_trackTime() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FifoPolicyNodeData(apache::thrift::FragileConstructor, ::std::int32_t idx__arg, ::std::int64_t trackTime__arg);

  FifoPolicyNodeData(FifoPolicyNodeData&&) = default;

  FifoPolicyNodeData(const FifoPolicyNodeData&) = default;


  FifoPolicyNodeData& operator=(FifoPolicyNodeData&&) = default;

  FifoPolicyNodeData& operator=(const FifoPolicyNodeData&) = default;
 private:
  ::std::int32_t __fbthrift_field_idx;
 private:
  ::std::int64_t __fbthrift_field_trackTime;

 public:

  bool operator==(const FifoPolicyNodeData&) const;
  bool operator<(const FifoPolicyNodeData&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> idx_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_idx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> idx_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_idx)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> idx_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_idx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> idx_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_idx)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> idx() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_idx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> idx() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_idx)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> idx() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_idx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> idx() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_idx)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> trackTime_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_trackTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> trackTime_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_trackTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> trackTime_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_trackTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> trackTime_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_trackTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> trackTime() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_trackTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> trackTime() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_trackTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> trackTime() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_trackTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> trackTime() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_trackTime)};
  }

  ::std::int32_t get_idx() const {
    return __fbthrift_field_idx;
  }

  [[deprecated("Use `FOO.idx_ref() = BAR;` instead of `FOO.set_idx(BAR);`")]]
  ::std::int32_t& set_idx(::std::int32_t idx_) {
    idx_ref() = idx_;
    return __fbthrift_field_idx;
  }

  ::std::int64_t get_trackTime() const {
    return __fbthrift_field_trackTime;
  }

  [[deprecated("Use `FOO.trackTime_ref() = BAR;` instead of `FOO.set_trackTime(BAR);`")]]
  ::std::int64_t& set_trackTime(::std::int64_t trackTime_) {
    trackTime_ref() = trackTime_;
    return __fbthrift_field_trackTime;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FifoPolicyNodeData>;
  friend void swap(FifoPolicyNodeData& a, FifoPolicyNodeData& b);
};

template <class Protocol_>
unsigned long FifoPolicyNodeData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class FifoPolicyData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::queue
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FifoPolicyData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FifoPolicyData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FifoPolicyData(apache::thrift::FragileConstructor, ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData> queue__arg);

  FifoPolicyData(FifoPolicyData&&) noexcept;

  FifoPolicyData(const FifoPolicyData& src);


  FifoPolicyData& operator=(FifoPolicyData&&) noexcept;
  FifoPolicyData& operator=(const FifoPolicyData& src);

  ~FifoPolicyData();

 private:
  ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData> __fbthrift_field_queue;

 public:

  bool operator==(const FifoPolicyData&) const;
  bool operator<(const FifoPolicyData&) const;

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> queue_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_queue};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> queue_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_queue)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> queue_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_queue};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> queue_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_queue)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> queue() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_queue};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> queue() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_queue)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> queue() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_queue};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> queue() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_queue)};
  }
  const ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>& get_queue() const&;
  ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData> get_queue() &&;

  template <typename T_FifoPolicyData_queue_struct_setter = ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>>
  [[deprecated("Use `FOO.queue_ref() = BAR;` instead of `FOO.set_queue(BAR);`")]]
  ::std::vector<::facebook::cachelib::navy::serialization::FifoPolicyNodeData>& set_queue(T_FifoPolicyData_queue_struct_setter&& queue_) {
    queue_ref() = std::forward<T_FifoPolicyData_queue_struct_setter>(queue_);
    return __fbthrift_field_queue;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FifoPolicyData>;
  friend void swap(FifoPolicyData& a, FifoPolicyData& b);
};

template <class Protocol_>
unsigned long FifoPolicyData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class AccessStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::totalHits,
    ::apache::thrift::ident::currHits,
    ::apache::thrift::ident::numReinsertions
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::byte_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AccessStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AccessStats() :
      __fbthrift_field_totalHits(static_cast<::std::int8_t>(0)),
      __fbthrift_field_currHits(static_cast<::std::int8_t>(0)),
      __fbthrift_field_numReinsertions(static_cast<::std::int8_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AccessStats(apache::thrift::FragileConstructor, ::std::int8_t totalHits__arg, ::std::int8_t currHits__arg, ::std::int8_t numReinsertions__arg);

  AccessStats(AccessStats&&) noexcept;

  AccessStats(const AccessStats& src);


  AccessStats& operator=(AccessStats&&) noexcept;
  AccessStats& operator=(const AccessStats& src);
 private:
  ::std::int8_t __fbthrift_field_totalHits;
 private:
  ::std::int8_t __fbthrift_field_currHits;
 private:
  ::std::int8_t __fbthrift_field_numReinsertions;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AccessStats&) const;
  bool operator<(const AccessStats&) const;

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> totalHits_ref() const& {
    return {this->__fbthrift_field_totalHits, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> totalHits_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_totalHits), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> totalHits_ref() & {
    return {this->__fbthrift_field_totalHits, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> totalHits_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_totalHits), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> totalHits() const& {
    return {this->__fbthrift_field_totalHits, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> totalHits() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_totalHits), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> totalHits() & {
    return {this->__fbthrift_field_totalHits, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> totalHits() && {
    return {static_cast<T&&>(this->__fbthrift_field_totalHits), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> currHits_ref() const& {
    return {this->__fbthrift_field_currHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> currHits_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_currHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> currHits_ref() & {
    return {this->__fbthrift_field_currHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> currHits_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_currHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> currHits() const& {
    return {this->__fbthrift_field_currHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> currHits() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_currHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> currHits() & {
    return {this->__fbthrift_field_currHits, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> currHits() && {
    return {static_cast<T&&>(this->__fbthrift_field_currHits), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numReinsertions_ref() const& {
    return {this->__fbthrift_field_numReinsertions, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numReinsertions_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_numReinsertions), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numReinsertions_ref() & {
    return {this->__fbthrift_field_numReinsertions, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numReinsertions_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_numReinsertions), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numReinsertions() const& {
    return {this->__fbthrift_field_numReinsertions, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numReinsertions() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_numReinsertions), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numReinsertions() & {
    return {this->__fbthrift_field_numReinsertions, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numReinsertions() && {
    return {static_cast<T&&>(this->__fbthrift_field_numReinsertions), __isset.at(2), __isset.bit(2)};
  }

  ::std::int8_t get_totalHits() const {
    return __fbthrift_field_totalHits;
  }

  [[deprecated("Use `FOO.totalHits_ref() = BAR;` instead of `FOO.set_totalHits(BAR);`")]]
  ::std::int8_t& set_totalHits(::std::int8_t totalHits_) {
    totalHits_ref() = totalHits_;
    return __fbthrift_field_totalHits;
  }

  ::std::int8_t get_currHits() const {
    return __fbthrift_field_currHits;
  }

  [[deprecated("Use `FOO.currHits_ref() = BAR;` instead of `FOO.set_currHits(BAR);`")]]
  ::std::int8_t& set_currHits(::std::int8_t currHits_) {
    currHits_ref() = currHits_;
    return __fbthrift_field_currHits;
  }

  ::std::int8_t get_numReinsertions() const {
    return __fbthrift_field_numReinsertions;
  }

  [[deprecated("Use `FOO.numReinsertions_ref() = BAR;` instead of `FOO.set_numReinsertions(BAR);`")]]
  ::std::int8_t& set_numReinsertions(::std::int8_t numReinsertions_) {
    numReinsertions_ref() = numReinsertions_;
    return __fbthrift_field_numReinsertions;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AccessStats>;
  friend void swap(AccessStats& a, AccessStats& b);
};

template <class Protocol_>
unsigned long AccessStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class AccessStatsPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::key,
    ::apache::thrift::ident::stats
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::cachelib::navy::serialization::AccessStats>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AccessStatsPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AccessStatsPair() :
      __fbthrift_field_key() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AccessStatsPair(apache::thrift::FragileConstructor, ::std::int64_t key__arg, ::facebook::cachelib::navy::serialization::AccessStats stats__arg);

  AccessStatsPair(AccessStatsPair&&) noexcept;

  AccessStatsPair(const AccessStatsPair& src);


  AccessStatsPair& operator=(AccessStatsPair&&) noexcept;
  AccessStatsPair& operator=(const AccessStatsPair& src);
 private:
  ::std::int64_t __fbthrift_field_key;
 private:
  ::facebook::cachelib::navy::serialization::AccessStats __fbthrift_field_stats;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AccessStatsPair&) const;
  bool operator<(const AccessStatsPair&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_key), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_key), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key() const& {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_key), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key() & {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key() && {
    return {static_cast<T&&>(this->__fbthrift_field_key), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stats_ref() const& {
    return {this->__fbthrift_field_stats, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stats_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stats), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stats_ref() & {
    return {this->__fbthrift_field_stats, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stats_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stats), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stats() const& {
    return {this->__fbthrift_field_stats, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stats() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stats), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stats() & {
    return {this->__fbthrift_field_stats, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::cachelib::navy::serialization::AccessStats>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stats() && {
    return {static_cast<T&&>(this->__fbthrift_field_stats), __isset.at(1), __isset.bit(1)};
  }

  ::std::int64_t get_key() const {
    return __fbthrift_field_key;
  }

  [[deprecated("Use `FOO.key_ref() = BAR;` instead of `FOO.set_key(BAR);`")]]
  ::std::int64_t& set_key(::std::int64_t key_) {
    key_ref() = key_;
    return __fbthrift_field_key;
  }
  const ::facebook::cachelib::navy::serialization::AccessStats& get_stats() const&;
  ::facebook::cachelib::navy::serialization::AccessStats get_stats() &&;

  template <typename T_AccessStatsPair_stats_struct_setter = ::facebook::cachelib::navy::serialization::AccessStats>
  [[deprecated("Use `FOO.stats_ref() = BAR;` instead of `FOO.set_stats(BAR);`")]]
  ::facebook::cachelib::navy::serialization::AccessStats& set_stats(T_AccessStatsPair_stats_struct_setter&& stats_) {
    stats_ref() = std::forward<T_AccessStatsPair_stats_struct_setter>(stats_);
    return __fbthrift_field_stats;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AccessStatsPair>;
  friend void swap(AccessStatsPair& a, AccessStatsPair& b);
};

template <class Protocol_>
unsigned long AccessStatsPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class AccessTracker final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::deprecated_data,
    ::apache::thrift::ident::data
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::struct_t<::facebook::cachelib::navy::serialization::AccessStats>>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AccessTracker;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AccessTracker();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AccessTracker(apache::thrift::FragileConstructor, ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats> deprecated_data__arg, ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair> data__arg);

  AccessTracker(AccessTracker&&) noexcept;

  AccessTracker(const AccessTracker& src);


  AccessTracker& operator=(AccessTracker&&) noexcept;
  AccessTracker& operator=(const AccessTracker& src);

  ~AccessTracker();

 private:
  ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats> __fbthrift_field_deprecated_data;
 private:
  ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair> __fbthrift_field_data;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AccessTracker&) const;
  bool operator<(const AccessTracker&) const;

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> deprecated_data_ref() const& {
    return {this->__fbthrift_field_deprecated_data, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> deprecated_data_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_deprecated_data), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> deprecated_data_ref() & {
    return {this->__fbthrift_field_deprecated_data, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> deprecated_data_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_deprecated_data), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> deprecated_data() const& {
    return {this->__fbthrift_field_deprecated_data, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> deprecated_data() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_deprecated_data), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> deprecated_data() & {
    return {this->__fbthrift_field_deprecated_data, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> deprecated_data() && {
    return {static_cast<T&&>(this->__fbthrift_field_deprecated_data), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data() && {
    return {static_cast<T&&>(this->__fbthrift_field_data), __isset.at(1), __isset.bit(1)};
  }
  const ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>& get_deprecated_data() const&;
  ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats> get_deprecated_data() &&;

  template <typename T_AccessTracker_deprecated_data_struct_setter = ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>>
  [[deprecated("Use `FOO.deprecated_data_ref() = BAR;` instead of `FOO.set_deprecated_data(BAR);`")]]
  ::std::map<::std::int64_t, ::facebook::cachelib::navy::serialization::AccessStats>& set_deprecated_data(T_AccessTracker_deprecated_data_struct_setter&& deprecated_data_) {
    deprecated_data_ref() = std::forward<T_AccessTracker_deprecated_data_struct_setter>(deprecated_data_);
    return __fbthrift_field_deprecated_data;
  }
  const ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>& get_data() const&;
  ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair> get_data() &&;

  template <typename T_AccessTracker_data_struct_setter = ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>>
  [[deprecated("Use `FOO.data_ref() = BAR;` instead of `FOO.set_data(BAR);`")]]
  ::std::vector<::facebook::cachelib::navy::serialization::AccessStatsPair>& set_data(T_AccessTracker_data_struct_setter&& data_) {
    data_ref() = std::forward<T_AccessTracker_data_struct_setter>(data_);
    return __fbthrift_field_data;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AccessTracker>;
  friend void swap(AccessTracker& a, AccessTracker& b);
};

template <class Protocol_>
unsigned long AccessTracker::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class BlockCacheConfig final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::version,
    ::apache::thrift::ident::cacheBaseOffset,
    ::apache::thrift::ident::cacheSize,
    ::apache::thrift::ident::allocAlignSize,
    ::apache::thrift::ident::deprecated_sizeClasses,
    ::apache::thrift::ident::checksum,
    ::apache::thrift::ident::deprecated_sizeDist,
    ::apache::thrift::ident::holeCount,
    ::apache::thrift::ident::holeSizeTotal,
    ::apache::thrift::ident::reinsertionPolicyEnabled,
    ::apache::thrift::ident::usedSizeBytes
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9,10,11};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 11;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BlockCacheConfig;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BlockCacheConfig();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BlockCacheConfig(apache::thrift::FragileConstructor, ::std::int64_t version__arg, ::std::int64_t cacheBaseOffset__arg, ::std::int64_t cacheSize__arg, ::std::int32_t allocAlignSize__arg, ::std::set<::std::int32_t> deprecated_sizeClasses__arg, bool checksum__arg, ::std::map<::std::int64_t, ::std::int64_t> deprecated_sizeDist__arg, ::std::int64_t holeCount__arg, ::std::int64_t holeSizeTotal__arg, bool reinsertionPolicyEnabled__arg, ::std::int64_t usedSizeBytes__arg);

  BlockCacheConfig(BlockCacheConfig&&) noexcept;

  BlockCacheConfig(const BlockCacheConfig& src);


  BlockCacheConfig& operator=(BlockCacheConfig&&) noexcept;
  BlockCacheConfig& operator=(const BlockCacheConfig& src);

  ~BlockCacheConfig();

 private:
  ::std::int64_t __fbthrift_field_version;
 private:
  ::std::int64_t __fbthrift_field_cacheBaseOffset;
 private:
  ::std::int64_t __fbthrift_field_cacheSize;
 private:
  ::std::int32_t __fbthrift_field_allocAlignSize;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_deprecated_sizeClasses;
 private:
  bool __fbthrift_field_checksum;
 private:
  ::std::map<::std::int64_t, ::std::int64_t> __fbthrift_field_deprecated_sizeDist;
 private:
  ::std::int64_t __fbthrift_field_holeCount;
 private:
  ::std::int64_t __fbthrift_field_holeSizeTotal;
 private:
  bool __fbthrift_field_reinsertionPolicyEnabled;
 private:
  ::std::int64_t __fbthrift_field_usedSizeBytes;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const BlockCacheConfig&) const;
  bool operator<(const BlockCacheConfig&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> version_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> version_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> version_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> version_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> version() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> version() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> version() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> version() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> cacheBaseOffset_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> cacheBaseOffset_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> cacheBaseOffset_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> cacheBaseOffset_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> cacheBaseOffset() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> cacheBaseOffset() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> cacheBaseOffset() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> cacheBaseOffset() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> cacheSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_cacheSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> cacheSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_cacheSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> cacheSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_cacheSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> cacheSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_cacheSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> cacheSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_cacheSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> cacheSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_cacheSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> cacheSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_cacheSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> cacheSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_cacheSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocAlignSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_allocAlignSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocAlignSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_allocAlignSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocAlignSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_allocAlignSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocAlignSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_allocAlignSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocAlignSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_allocAlignSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocAlignSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_allocAlignSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocAlignSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_allocAlignSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocAlignSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_allocAlignSize)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> deprecated_sizeClasses_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_deprecated_sizeClasses};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> deprecated_sizeClasses_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_deprecated_sizeClasses)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> deprecated_sizeClasses_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_deprecated_sizeClasses};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> deprecated_sizeClasses_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_deprecated_sizeClasses)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> deprecated_sizeClasses() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_deprecated_sizeClasses};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> deprecated_sizeClasses() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_deprecated_sizeClasses)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> deprecated_sizeClasses() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_deprecated_sizeClasses};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> deprecated_sizeClasses() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_deprecated_sizeClasses)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> checksum_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_checksum};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> checksum_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_checksum)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> checksum_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_checksum};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> checksum_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_checksum)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> checksum() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_checksum};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> checksum() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_checksum)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> checksum() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_checksum};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> checksum() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_checksum)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> deprecated_sizeDist_ref() const& {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> deprecated_sizeDist_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> deprecated_sizeDist_ref() & {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> deprecated_sizeDist_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> deprecated_sizeDist() const& {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> deprecated_sizeDist() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> deprecated_sizeDist() & {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> deprecated_sizeDist() && {
    return {static_cast<T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> holeCount_ref() const& {
    return {this->__fbthrift_field_holeCount, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> holeCount_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_holeCount), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> holeCount_ref() & {
    return {this->__fbthrift_field_holeCount, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> holeCount_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_holeCount), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> holeCount() const& {
    return {this->__fbthrift_field_holeCount, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> holeCount() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_holeCount), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> holeCount() & {
    return {this->__fbthrift_field_holeCount, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> holeCount() && {
    return {static_cast<T&&>(this->__fbthrift_field_holeCount), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> holeSizeTotal_ref() const& {
    return {this->__fbthrift_field_holeSizeTotal, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> holeSizeTotal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_holeSizeTotal), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> holeSizeTotal_ref() & {
    return {this->__fbthrift_field_holeSizeTotal, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> holeSizeTotal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_holeSizeTotal), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> holeSizeTotal() const& {
    return {this->__fbthrift_field_holeSizeTotal, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> holeSizeTotal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_holeSizeTotal), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> holeSizeTotal() & {
    return {this->__fbthrift_field_holeSizeTotal, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> holeSizeTotal() && {
    return {static_cast<T&&>(this->__fbthrift_field_holeSizeTotal), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> reinsertionPolicyEnabled_ref() const& {
    return {this->__fbthrift_field_reinsertionPolicyEnabled, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> reinsertionPolicyEnabled_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_reinsertionPolicyEnabled), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> reinsertionPolicyEnabled_ref() & {
    return {this->__fbthrift_field_reinsertionPolicyEnabled, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> reinsertionPolicyEnabled_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_reinsertionPolicyEnabled), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> reinsertionPolicyEnabled() const& {
    return {this->__fbthrift_field_reinsertionPolicyEnabled, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> reinsertionPolicyEnabled() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_reinsertionPolicyEnabled), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> reinsertionPolicyEnabled() & {
    return {this->__fbthrift_field_reinsertionPolicyEnabled, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> reinsertionPolicyEnabled() && {
    return {static_cast<T&&>(this->__fbthrift_field_reinsertionPolicyEnabled), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> usedSizeBytes_ref() const& {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> usedSizeBytes_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> usedSizeBytes_ref() & {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> usedSizeBytes_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> usedSizeBytes() const& {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> usedSizeBytes() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> usedSizeBytes() & {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> usedSizeBytes() && {
    return {static_cast<T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(4), __isset.bit(4)};
  }

  ::std::int64_t get_version() const {
    return __fbthrift_field_version;
  }

  [[deprecated("Use `FOO.version_ref() = BAR;` instead of `FOO.set_version(BAR);`")]]
  ::std::int64_t& set_version(::std::int64_t version_) {
    version_ref() = version_;
    return __fbthrift_field_version;
  }

  ::std::int64_t get_cacheBaseOffset() const {
    return __fbthrift_field_cacheBaseOffset;
  }

  [[deprecated("Use `FOO.cacheBaseOffset_ref() = BAR;` instead of `FOO.set_cacheBaseOffset(BAR);`")]]
  ::std::int64_t& set_cacheBaseOffset(::std::int64_t cacheBaseOffset_) {
    cacheBaseOffset_ref() = cacheBaseOffset_;
    return __fbthrift_field_cacheBaseOffset;
  }

  ::std::int64_t get_cacheSize() const {
    return __fbthrift_field_cacheSize;
  }

  [[deprecated("Use `FOO.cacheSize_ref() = BAR;` instead of `FOO.set_cacheSize(BAR);`")]]
  ::std::int64_t& set_cacheSize(::std::int64_t cacheSize_) {
    cacheSize_ref() = cacheSize_;
    return __fbthrift_field_cacheSize;
  }

  ::std::int32_t get_allocAlignSize() const {
    return __fbthrift_field_allocAlignSize;
  }

  [[deprecated("Use `FOO.allocAlignSize_ref() = BAR;` instead of `FOO.set_allocAlignSize(BAR);`")]]
  ::std::int32_t& set_allocAlignSize(::std::int32_t allocAlignSize_) {
    allocAlignSize_ref() = allocAlignSize_;
    return __fbthrift_field_allocAlignSize;
  }
  const ::std::set<::std::int32_t>& get_deprecated_sizeClasses() const&;
  ::std::set<::std::int32_t> get_deprecated_sizeClasses() &&;

  template <typename T_BlockCacheConfig_deprecated_sizeClasses_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.deprecated_sizeClasses_ref() = BAR;` instead of `FOO.set_deprecated_sizeClasses(BAR);`")]]
  ::std::set<::std::int32_t>& set_deprecated_sizeClasses(T_BlockCacheConfig_deprecated_sizeClasses_struct_setter&& deprecated_sizeClasses_) {
    deprecated_sizeClasses_ref() = std::forward<T_BlockCacheConfig_deprecated_sizeClasses_struct_setter>(deprecated_sizeClasses_);
    return __fbthrift_field_deprecated_sizeClasses;
  }

  bool get_checksum() const {
    return __fbthrift_field_checksum;
  }

  [[deprecated("Use `FOO.checksum_ref() = BAR;` instead of `FOO.set_checksum(BAR);`")]]
  bool& set_checksum(bool checksum_) {
    checksum_ref() = checksum_;
    return __fbthrift_field_checksum;
  }
  const ::std::map<::std::int64_t, ::std::int64_t>& get_deprecated_sizeDist() const&;
  ::std::map<::std::int64_t, ::std::int64_t> get_deprecated_sizeDist() &&;

  template <typename T_BlockCacheConfig_deprecated_sizeDist_struct_setter = ::std::map<::std::int64_t, ::std::int64_t>>
  [[deprecated("Use `FOO.deprecated_sizeDist_ref() = BAR;` instead of `FOO.set_deprecated_sizeDist(BAR);`")]]
  ::std::map<::std::int64_t, ::std::int64_t>& set_deprecated_sizeDist(T_BlockCacheConfig_deprecated_sizeDist_struct_setter&& deprecated_sizeDist_) {
    deprecated_sizeDist_ref() = std::forward<T_BlockCacheConfig_deprecated_sizeDist_struct_setter>(deprecated_sizeDist_);
    return __fbthrift_field_deprecated_sizeDist;
  }

  ::std::int64_t get_holeCount() const {
    return __fbthrift_field_holeCount;
  }

  [[deprecated("Use `FOO.holeCount_ref() = BAR;` instead of `FOO.set_holeCount(BAR);`")]]
  ::std::int64_t& set_holeCount(::std::int64_t holeCount_) {
    holeCount_ref() = holeCount_;
    return __fbthrift_field_holeCount;
  }

  ::std::int64_t get_holeSizeTotal() const {
    return __fbthrift_field_holeSizeTotal;
  }

  [[deprecated("Use `FOO.holeSizeTotal_ref() = BAR;` instead of `FOO.set_holeSizeTotal(BAR);`")]]
  ::std::int64_t& set_holeSizeTotal(::std::int64_t holeSizeTotal_) {
    holeSizeTotal_ref() = holeSizeTotal_;
    return __fbthrift_field_holeSizeTotal;
  }

  bool get_reinsertionPolicyEnabled() const {
    return __fbthrift_field_reinsertionPolicyEnabled;
  }

  [[deprecated("Use `FOO.reinsertionPolicyEnabled_ref() = BAR;` instead of `FOO.set_reinsertionPolicyEnabled(BAR);`")]]
  bool& set_reinsertionPolicyEnabled(bool reinsertionPolicyEnabled_) {
    reinsertionPolicyEnabled_ref() = reinsertionPolicyEnabled_;
    return __fbthrift_field_reinsertionPolicyEnabled;
  }

  ::std::int64_t get_usedSizeBytes() const {
    return __fbthrift_field_usedSizeBytes;
  }

  [[deprecated("Use `FOO.usedSizeBytes_ref() = BAR;` instead of `FOO.set_usedSizeBytes(BAR);`")]]
  ::std::int64_t& set_usedSizeBytes(::std::int64_t usedSizeBytes_) {
    usedSizeBytes_ref() = usedSizeBytes_;
    return __fbthrift_field_usedSizeBytes;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BlockCacheConfig>;
  friend void swap(BlockCacheConfig& a, BlockCacheConfig& b);
};

template <class Protocol_>
unsigned long BlockCacheConfig::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class BigHashPersistentData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::version,
    ::apache::thrift::ident::generationTime,
    ::apache::thrift::ident::itemCount,
    ::apache::thrift::ident::bucketSize,
    ::apache::thrift::ident::cacheBaseOffset,
    ::apache::thrift::ident::numBuckets,
    ::apache::thrift::ident::deprecated_sizeDist,
    ::apache::thrift::ident::usedSizeBytes
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 8;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BigHashPersistentData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BigHashPersistentData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BigHashPersistentData(apache::thrift::FragileConstructor, ::std::int32_t version__arg, ::std::int64_t generationTime__arg, ::std::int64_t itemCount__arg, ::std::int64_t bucketSize__arg, ::std::int64_t cacheBaseOffset__arg, ::std::int64_t numBuckets__arg, ::std::map<::std::int64_t, ::std::int64_t> deprecated_sizeDist__arg, ::std::int64_t usedSizeBytes__arg);

  BigHashPersistentData(BigHashPersistentData&&) noexcept;

  BigHashPersistentData(const BigHashPersistentData& src);


  BigHashPersistentData& operator=(BigHashPersistentData&&) noexcept;
  BigHashPersistentData& operator=(const BigHashPersistentData& src);

  ~BigHashPersistentData();

 private:
  ::std::int32_t __fbthrift_field_version;
 private:
  ::std::int64_t __fbthrift_field_generationTime;
 private:
  ::std::int64_t __fbthrift_field_itemCount;
 private:
  ::std::int64_t __fbthrift_field_bucketSize;
 private:
  ::std::int64_t __fbthrift_field_cacheBaseOffset;
 private:
  ::std::int64_t __fbthrift_field_numBuckets;
 private:
  ::std::map<::std::int64_t, ::std::int64_t> __fbthrift_field_deprecated_sizeDist;
 private:
  ::std::int64_t __fbthrift_field_usedSizeBytes;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const BigHashPersistentData&) const;
  bool operator<(const BigHashPersistentData&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> version_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> version_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> version_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> version_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> version() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> version() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> version() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_version};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> version() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_version)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> generationTime_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_generationTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> generationTime_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_generationTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> generationTime_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_generationTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> generationTime_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_generationTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> generationTime() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_generationTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> generationTime() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_generationTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> generationTime() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_generationTime};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> generationTime() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_generationTime)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> itemCount_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_itemCount};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> itemCount_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_itemCount)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> itemCount_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_itemCount};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> itemCount_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_itemCount)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> itemCount() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_itemCount};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> itemCount() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_itemCount)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> itemCount() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_itemCount};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> itemCount() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_itemCount)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> bucketSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_bucketSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> bucketSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bucketSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> bucketSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_bucketSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> bucketSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bucketSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> bucketSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_bucketSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> bucketSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bucketSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> bucketSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_bucketSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> bucketSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bucketSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> cacheBaseOffset_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> cacheBaseOffset_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> cacheBaseOffset_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> cacheBaseOffset_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> cacheBaseOffset() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> cacheBaseOffset() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> cacheBaseOffset() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_cacheBaseOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> cacheBaseOffset() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_cacheBaseOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numBuckets_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_numBuckets};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numBuckets_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_numBuckets)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numBuckets_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_numBuckets};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numBuckets_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_numBuckets)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numBuckets() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_numBuckets};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numBuckets() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_numBuckets)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numBuckets() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_numBuckets};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numBuckets() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_numBuckets)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> deprecated_sizeDist_ref() const& {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> deprecated_sizeDist_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> deprecated_sizeDist_ref() & {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> deprecated_sizeDist_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> deprecated_sizeDist() const& {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> deprecated_sizeDist() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> deprecated_sizeDist() & {
    return {this->__fbthrift_field_deprecated_sizeDist, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> deprecated_sizeDist() && {
    return {static_cast<T&&>(this->__fbthrift_field_deprecated_sizeDist), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> usedSizeBytes_ref() const& {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> usedSizeBytes_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> usedSizeBytes_ref() & {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> usedSizeBytes_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> usedSizeBytes() const& {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> usedSizeBytes() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> usedSizeBytes() & {
    return {this->__fbthrift_field_usedSizeBytes, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> usedSizeBytes() && {
    return {static_cast<T&&>(this->__fbthrift_field_usedSizeBytes), __isset.at(1), __isset.bit(1)};
  }

  ::std::int32_t get_version() const {
    return __fbthrift_field_version;
  }

  [[deprecated("Use `FOO.version_ref() = BAR;` instead of `FOO.set_version(BAR);`")]]
  ::std::int32_t& set_version(::std::int32_t version_) {
    version_ref() = version_;
    return __fbthrift_field_version;
  }

  ::std::int64_t get_generationTime() const {
    return __fbthrift_field_generationTime;
  }

  [[deprecated("Use `FOO.generationTime_ref() = BAR;` instead of `FOO.set_generationTime(BAR);`")]]
  ::std::int64_t& set_generationTime(::std::int64_t generationTime_) {
    generationTime_ref() = generationTime_;
    return __fbthrift_field_generationTime;
  }

  ::std::int64_t get_itemCount() const {
    return __fbthrift_field_itemCount;
  }

  [[deprecated("Use `FOO.itemCount_ref() = BAR;` instead of `FOO.set_itemCount(BAR);`")]]
  ::std::int64_t& set_itemCount(::std::int64_t itemCount_) {
    itemCount_ref() = itemCount_;
    return __fbthrift_field_itemCount;
  }

  ::std::int64_t get_bucketSize() const {
    return __fbthrift_field_bucketSize;
  }

  [[deprecated("Use `FOO.bucketSize_ref() = BAR;` instead of `FOO.set_bucketSize(BAR);`")]]
  ::std::int64_t& set_bucketSize(::std::int64_t bucketSize_) {
    bucketSize_ref() = bucketSize_;
    return __fbthrift_field_bucketSize;
  }

  ::std::int64_t get_cacheBaseOffset() const {
    return __fbthrift_field_cacheBaseOffset;
  }

  [[deprecated("Use `FOO.cacheBaseOffset_ref() = BAR;` instead of `FOO.set_cacheBaseOffset(BAR);`")]]
  ::std::int64_t& set_cacheBaseOffset(::std::int64_t cacheBaseOffset_) {
    cacheBaseOffset_ref() = cacheBaseOffset_;
    return __fbthrift_field_cacheBaseOffset;
  }

  ::std::int64_t get_numBuckets() const {
    return __fbthrift_field_numBuckets;
  }

  [[deprecated("Use `FOO.numBuckets_ref() = BAR;` instead of `FOO.set_numBuckets(BAR);`")]]
  ::std::int64_t& set_numBuckets(::std::int64_t numBuckets_) {
    numBuckets_ref() = numBuckets_;
    return __fbthrift_field_numBuckets;
  }
  const ::std::map<::std::int64_t, ::std::int64_t>& get_deprecated_sizeDist() const&;
  ::std::map<::std::int64_t, ::std::int64_t> get_deprecated_sizeDist() &&;

  template <typename T_BigHashPersistentData_deprecated_sizeDist_struct_setter = ::std::map<::std::int64_t, ::std::int64_t>>
  [[deprecated("Use `FOO.deprecated_sizeDist_ref() = BAR;` instead of `FOO.set_deprecated_sizeDist(BAR);`")]]
  ::std::map<::std::int64_t, ::std::int64_t>& set_deprecated_sizeDist(T_BigHashPersistentData_deprecated_sizeDist_struct_setter&& deprecated_sizeDist_) {
    deprecated_sizeDist_ref() = std::forward<T_BigHashPersistentData_deprecated_sizeDist_struct_setter>(deprecated_sizeDist_);
    return __fbthrift_field_deprecated_sizeDist;
  }

  ::std::int64_t get_usedSizeBytes() const {
    return __fbthrift_field_usedSizeBytes;
  }

  [[deprecated("Use `FOO.usedSizeBytes_ref() = BAR;` instead of `FOO.set_usedSizeBytes(BAR);`")]]
  ::std::int64_t& set_usedSizeBytes(::std::int64_t usedSizeBytes_) {
    usedSizeBytes_ref() = usedSizeBytes_;
    return __fbthrift_field_usedSizeBytes;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BigHashPersistentData>;
  friend void swap(BigHashPersistentData& a, BigHashPersistentData& b);
};

template <class Protocol_>
unsigned long BigHashPersistentData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::cachelib::navy::serialization
