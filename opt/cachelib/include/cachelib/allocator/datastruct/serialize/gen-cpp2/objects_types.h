/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct size;
struct compressedHead;
struct compressedTail;
struct compressedHead;
struct compressedTail;
struct size;
struct lists;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_size
#define APACHE_THRIFT_ACCESSOR_size
APACHE_THRIFT_DEFINE_ACCESSOR(size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedHead
#define APACHE_THRIFT_ACCESSOR_compressedHead
APACHE_THRIFT_DEFINE_ACCESSOR(compressedHead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedTail
#define APACHE_THRIFT_ACCESSOR_compressedTail
APACHE_THRIFT_DEFINE_ACCESSOR(compressedTail);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedHead
#define APACHE_THRIFT_ACCESSOR_compressedHead
APACHE_THRIFT_DEFINE_ACCESSOR(compressedHead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedTail
#define APACHE_THRIFT_ACCESSOR_compressedTail
APACHE_THRIFT_DEFINE_ACCESSOR(compressedTail);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_size
#define APACHE_THRIFT_ACCESSOR_size
APACHE_THRIFT_DEFINE_ACCESSOR(size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lists
#define APACHE_THRIFT_ACCESSOR_lists
APACHE_THRIFT_DEFINE_ACCESSOR(lists);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook::cachelib::serialization {
class SListObject;
class DListObject;
class MultiDListObject;
} // namespace facebook::cachelib::serialization
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::cachelib::serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class SListObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::size,
    ::apache::thrift::ident::compressedHead,
    ::apache::thrift::ident::compressedTail
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SListObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SListObject() :
      __fbthrift_field_size(),
      __fbthrift_field_compressedHead(),
      __fbthrift_field_compressedTail(static_cast<::std::int64_t>(-1)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SListObject(apache::thrift::FragileConstructor, ::std::int64_t size__arg, ::std::int64_t compressedHead__arg, ::std::int64_t compressedTail__arg);

  SListObject(SListObject&&) = default;

  SListObject(const SListObject&) = default;


  SListObject& operator=(SListObject&&) = default;

  SListObject& operator=(const SListObject&) = default;
 private:
  ::std::int64_t __fbthrift_field_size;
 private:
  ::std::int64_t __fbthrift_field_compressedHead;
 private:
  ::std::int64_t __fbthrift_field_compressedTail;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SListObject&) const;
  bool operator<(const SListObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> compressedTail_ref() const& {
    return {this->__fbthrift_field_compressedTail, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> compressedTail_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_compressedTail), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> compressedTail_ref() & {
    return {this->__fbthrift_field_compressedTail, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> compressedTail_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_compressedTail), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> compressedTail() const& {
    return {this->__fbthrift_field_compressedTail, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> compressedTail() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_compressedTail), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> compressedTail() & {
    return {this->__fbthrift_field_compressedTail, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> compressedTail() && {
    return {static_cast<T&&>(this->__fbthrift_field_compressedTail), __isset.at(0), __isset.bit(0)};
  }

  ::std::int64_t get_size() const {
    return __fbthrift_field_size;
  }

  [[deprecated("Use `FOO.size_ref() = BAR;` instead of `FOO.set_size(BAR);`")]]
  ::std::int64_t& set_size(::std::int64_t size_) {
    size_ref() = size_;
    return __fbthrift_field_size;
  }

  ::std::int64_t get_compressedHead() const {
    return __fbthrift_field_compressedHead;
  }

  [[deprecated("Use `FOO.compressedHead_ref() = BAR;` instead of `FOO.set_compressedHead(BAR);`")]]
  ::std::int64_t& set_compressedHead(::std::int64_t compressedHead_) {
    compressedHead_ref() = compressedHead_;
    return __fbthrift_field_compressedHead;
  }

  ::std::int64_t get_compressedTail() const {
    return __fbthrift_field_compressedTail;
  }

  [[deprecated("Use `FOO.compressedTail_ref() = BAR;` instead of `FOO.set_compressedTail(BAR);`")]]
  ::std::int64_t& set_compressedTail(::std::int64_t compressedTail_) {
    compressedTail_ref() = compressedTail_;
    return __fbthrift_field_compressedTail;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SListObject>;
  friend void swap(SListObject& a, SListObject& b);
};

template <class Protocol_>
unsigned long SListObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class DListObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::compressedHead,
    ::apache::thrift::ident::compressedTail,
    ::apache::thrift::ident::size
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DListObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  DListObject() :
      __fbthrift_field_compressedHead(),
      __fbthrift_field_compressedTail(),
      __fbthrift_field_size() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DListObject(apache::thrift::FragileConstructor, ::std::int64_t compressedHead__arg, ::std::int64_t compressedTail__arg, ::std::int64_t size__arg);

  DListObject(DListObject&&) = default;

  DListObject(const DListObject&) = default;


  DListObject& operator=(DListObject&&) = default;

  DListObject& operator=(const DListObject&) = default;
 private:
  ::std::int64_t __fbthrift_field_compressedHead;
 private:
  ::std::int64_t __fbthrift_field_compressedTail;
 private:
  ::std::int64_t __fbthrift_field_size;

 public:

  bool operator==(const DListObject&) const;
  bool operator<(const DListObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedTail_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_compressedTail};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedTail_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_compressedTail)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedTail_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_compressedTail};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedTail_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_compressedTail)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedTail() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_compressedTail};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedTail() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_compressedTail)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedTail() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_compressedTail};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedTail() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_compressedTail)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_size)};
  }

  ::std::int64_t get_compressedHead() const {
    return __fbthrift_field_compressedHead;
  }

  [[deprecated("Use `FOO.compressedHead_ref() = BAR;` instead of `FOO.set_compressedHead(BAR);`")]]
  ::std::int64_t& set_compressedHead(::std::int64_t compressedHead_) {
    compressedHead_ref() = compressedHead_;
    return __fbthrift_field_compressedHead;
  }

  ::std::int64_t get_compressedTail() const {
    return __fbthrift_field_compressedTail;
  }

  [[deprecated("Use `FOO.compressedTail_ref() = BAR;` instead of `FOO.set_compressedTail(BAR);`")]]
  ::std::int64_t& set_compressedTail(::std::int64_t compressedTail_) {
    compressedTail_ref() = compressedTail_;
    return __fbthrift_field_compressedTail;
  }

  ::std::int64_t get_size() const {
    return __fbthrift_field_size;
  }

  [[deprecated("Use `FOO.size_ref() = BAR;` instead of `FOO.set_size(BAR);`")]]
  ::std::int64_t& set_size(::std::int64_t size_) {
    size_ref() = size_;
    return __fbthrift_field_size;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DListObject>;
  friend void swap(DListObject& a, DListObject& b);
};

template <class Protocol_>
unsigned long DListObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MultiDListObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::lists
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::cachelib::serialization::DListObject>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MultiDListObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MultiDListObject();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MultiDListObject(apache::thrift::FragileConstructor, ::std::vector<::facebook::cachelib::serialization::DListObject> lists__arg);

  MultiDListObject(MultiDListObject&&) noexcept;

  MultiDListObject(const MultiDListObject& src);


  MultiDListObject& operator=(MultiDListObject&&) noexcept;
  MultiDListObject& operator=(const MultiDListObject& src);

  ~MultiDListObject();

 private:
  ::std::vector<::facebook::cachelib::serialization::DListObject> __fbthrift_field_lists;

 public:

  bool operator==(const MultiDListObject&) const;
  bool operator<(const MultiDListObject&) const;

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lists_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_lists};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lists_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lists)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lists_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_lists};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lists_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lists)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lists() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_lists};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lists() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lists)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lists() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_lists};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lists() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lists)};
  }
  const ::std::vector<::facebook::cachelib::serialization::DListObject>& get_lists() const&;
  ::std::vector<::facebook::cachelib::serialization::DListObject> get_lists() &&;

  template <typename T_MultiDListObject_lists_struct_setter = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  [[deprecated("Use `FOO.lists_ref() = BAR;` instead of `FOO.set_lists(BAR);`")]]
  ::std::vector<::facebook::cachelib::serialization::DListObject>& set_lists(T_MultiDListObject_lists_struct_setter&& lists_) {
    lists_ref() = std::forward<T_MultiDListObject_lists_struct_setter>(lists_);
    return __fbthrift_field_lists;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MultiDListObject>;
  friend void swap(MultiDListObject& a, MultiDListObject& b);
};

template <class Protocol_>
unsigned long MultiDListObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::cachelib::serialization
