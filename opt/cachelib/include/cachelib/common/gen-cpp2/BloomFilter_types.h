/**
 * Autogenerated by Thrift for BloomFilter.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct numFilters;
struct hashTableBitSize;
struct filterByteSize;
struct fragmentSize;
struct seeds;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_numFilters
#define APACHE_THRIFT_ACCESSOR_numFilters
APACHE_THRIFT_DEFINE_ACCESSOR(numFilters);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hashTableBitSize
#define APACHE_THRIFT_ACCESSOR_hashTableBitSize
APACHE_THRIFT_DEFINE_ACCESSOR(hashTableBitSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_filterByteSize
#define APACHE_THRIFT_ACCESSOR_filterByteSize
APACHE_THRIFT_DEFINE_ACCESSOR(filterByteSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fragmentSize
#define APACHE_THRIFT_ACCESSOR_fragmentSize
APACHE_THRIFT_DEFINE_ACCESSOR(fragmentSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_seeds
#define APACHE_THRIFT_ACCESSOR_seeds
APACHE_THRIFT_DEFINE_ACCESSOR(seeds);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook::cachelib::serialization {
class BloomFilterPersistentData;
} // namespace facebook::cachelib::serialization
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::cachelib::serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class BloomFilterPersistentData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::numFilters,
    ::apache::thrift::ident::hashTableBitSize,
    ::apache::thrift::ident::filterByteSize,
    ::apache::thrift::ident::fragmentSize,
    ::apache::thrift::ident::seeds
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BloomFilterPersistentData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BloomFilterPersistentData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BloomFilterPersistentData(apache::thrift::FragileConstructor, ::std::int32_t numFilters__arg, ::std::int64_t hashTableBitSize__arg, ::std::int64_t filterByteSize__arg, ::std::int32_t fragmentSize__arg, ::std::vector<::std::int64_t> seeds__arg);

  BloomFilterPersistentData(BloomFilterPersistentData&&) noexcept;

  BloomFilterPersistentData(const BloomFilterPersistentData& src);


  BloomFilterPersistentData& operator=(BloomFilterPersistentData&&) noexcept;
  BloomFilterPersistentData& operator=(const BloomFilterPersistentData& src);

  ~BloomFilterPersistentData();

 private:
  ::std::int32_t __fbthrift_field_numFilters;
 private:
  ::std::int64_t __fbthrift_field_hashTableBitSize;
 private:
  ::std::int64_t __fbthrift_field_filterByteSize;
 private:
  ::std::int32_t __fbthrift_field_fragmentSize;
 private:
  ::std::vector<::std::int64_t> __fbthrift_field_seeds;

 public:

  bool operator==(const BloomFilterPersistentData&) const;
  bool operator<(const BloomFilterPersistentData&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numFilters_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_numFilters};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numFilters_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_numFilters)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numFilters_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_numFilters};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numFilters_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_numFilters)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numFilters() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_numFilters};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numFilters() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_numFilters)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numFilters() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_numFilters};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numFilters() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_numFilters)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> hashTableBitSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_hashTableBitSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> hashTableBitSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_hashTableBitSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> hashTableBitSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_hashTableBitSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> hashTableBitSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_hashTableBitSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> hashTableBitSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_hashTableBitSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> hashTableBitSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_hashTableBitSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> hashTableBitSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_hashTableBitSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> hashTableBitSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_hashTableBitSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> filterByteSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_filterByteSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> filterByteSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_filterByteSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> filterByteSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_filterByteSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> filterByteSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_filterByteSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> filterByteSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_filterByteSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> filterByteSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_filterByteSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> filterByteSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_filterByteSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> filterByteSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_filterByteSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> fragmentSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_fragmentSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> fragmentSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_fragmentSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> fragmentSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_fragmentSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> fragmentSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_fragmentSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> fragmentSize() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_fragmentSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> fragmentSize() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_fragmentSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> fragmentSize() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_fragmentSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> fragmentSize() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_fragmentSize)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> seeds_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_seeds};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> seeds_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_seeds)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> seeds_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_seeds};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> seeds_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_seeds)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> seeds() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_seeds};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> seeds() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_seeds)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> seeds() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_seeds};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> seeds() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_seeds)};
  }

  ::std::int32_t get_numFilters() const {
    return __fbthrift_field_numFilters;
  }

  [[deprecated("Use `FOO.numFilters_ref() = BAR;` instead of `FOO.set_numFilters(BAR);`")]]
  ::std::int32_t& set_numFilters(::std::int32_t numFilters_) {
    numFilters_ref() = numFilters_;
    return __fbthrift_field_numFilters;
  }

  ::std::int64_t get_hashTableBitSize() const {
    return __fbthrift_field_hashTableBitSize;
  }

  [[deprecated("Use `FOO.hashTableBitSize_ref() = BAR;` instead of `FOO.set_hashTableBitSize(BAR);`")]]
  ::std::int64_t& set_hashTableBitSize(::std::int64_t hashTableBitSize_) {
    hashTableBitSize_ref() = hashTableBitSize_;
    return __fbthrift_field_hashTableBitSize;
  }

  ::std::int64_t get_filterByteSize() const {
    return __fbthrift_field_filterByteSize;
  }

  [[deprecated("Use `FOO.filterByteSize_ref() = BAR;` instead of `FOO.set_filterByteSize(BAR);`")]]
  ::std::int64_t& set_filterByteSize(::std::int64_t filterByteSize_) {
    filterByteSize_ref() = filterByteSize_;
    return __fbthrift_field_filterByteSize;
  }

  ::std::int32_t get_fragmentSize() const {
    return __fbthrift_field_fragmentSize;
  }

  [[deprecated("Use `FOO.fragmentSize_ref() = BAR;` instead of `FOO.set_fragmentSize(BAR);`")]]
  ::std::int32_t& set_fragmentSize(::std::int32_t fragmentSize_) {
    fragmentSize_ref() = fragmentSize_;
    return __fbthrift_field_fragmentSize;
  }
  const ::std::vector<::std::int64_t>& get_seeds() const&;
  ::std::vector<::std::int64_t> get_seeds() &&;

  template <typename T_BloomFilterPersistentData_seeds_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.seeds_ref() = BAR;` instead of `FOO.set_seeds(BAR);`")]]
  ::std::vector<::std::int64_t>& set_seeds(T_BloomFilterPersistentData_seeds_struct_setter&& seeds_) {
    seeds_ref() = std::forward<T_BloomFilterPersistentData_seeds_struct_setter>(seeds_);
    return __fbthrift_field_seeds;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BloomFilterPersistentData>;
  friend void swap(BloomFilterPersistentData& a, BloomFilterPersistentData& b);
};

template <class Protocol_>
unsigned long BloomFilterPersistentData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::cachelib::serialization
