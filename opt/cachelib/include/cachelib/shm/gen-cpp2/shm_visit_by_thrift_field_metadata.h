/**
 * Autogenerated by Thrift for shm.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "shm_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::facebook::cachelib::serialization::ShmManagerObject> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).shmVal_ref());
    case 3:
      return f(1, static_cast<T&&>(t).nameToKeyMap_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::cachelib::serialization::ShmManagerObject");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
