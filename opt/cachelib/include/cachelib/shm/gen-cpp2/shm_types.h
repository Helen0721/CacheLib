/**
 * Autogenerated by Thrift for shm.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct shmVal;
struct nameToKeyMap;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_shmVal
#define APACHE_THRIFT_ACCESSOR_shmVal
APACHE_THRIFT_DEFINE_ACCESSOR(shmVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nameToKeyMap
#define APACHE_THRIFT_ACCESSOR_nameToKeyMap
APACHE_THRIFT_DEFINE_ACCESSOR(nameToKeyMap);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook::cachelib::serialization {
class ShmManagerObject;
} // namespace facebook::cachelib::serialization
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::cachelib::serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class ShmManagerObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::shmVal,
    ::apache::thrift::ident::nameToKeyMap
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ShmManagerObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ShmManagerObject();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ShmManagerObject(apache::thrift::FragileConstructor, ::std::int8_t shmVal__arg, ::std::map<::std::string, ::std::string> nameToKeyMap__arg);

  ShmManagerObject(ShmManagerObject&&) noexcept;

  ShmManagerObject(const ShmManagerObject& src);


  ShmManagerObject& operator=(ShmManagerObject&&) noexcept;
  ShmManagerObject& operator=(const ShmManagerObject& src);

  ~ShmManagerObject();

 private:
  ::std::int8_t __fbthrift_field_shmVal;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_nameToKeyMap;

 public:

  bool operator==(const ShmManagerObject&) const;
  bool operator<(const ShmManagerObject&) const;

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> shmVal_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_shmVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> shmVal_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_shmVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> shmVal_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_shmVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> shmVal_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_shmVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> shmVal() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_shmVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> shmVal() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_shmVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> shmVal() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_shmVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> shmVal() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_shmVal)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> nameToKeyMap_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_nameToKeyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> nameToKeyMap_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_nameToKeyMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> nameToKeyMap_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_nameToKeyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> nameToKeyMap_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_nameToKeyMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> nameToKeyMap() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_nameToKeyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> nameToKeyMap() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_nameToKeyMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> nameToKeyMap() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_nameToKeyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> nameToKeyMap() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_nameToKeyMap)};
  }

  ::std::int8_t get_shmVal() const {
    return __fbthrift_field_shmVal;
  }

  [[deprecated("Use `FOO.shmVal_ref() = BAR;` instead of `FOO.set_shmVal(BAR);`")]]
  ::std::int8_t& set_shmVal(::std::int8_t shmVal_) {
    shmVal_ref() = shmVal_;
    return __fbthrift_field_shmVal;
  }
  const ::std::map<::std::string, ::std::string>& get_nameToKeyMap() const&;
  ::std::map<::std::string, ::std::string> get_nameToKeyMap() &&;

  template <typename T_ShmManagerObject_nameToKeyMap_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.nameToKeyMap_ref() = BAR;` instead of `FOO.set_nameToKeyMap(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_nameToKeyMap(T_ShmManagerObject_nameToKeyMap_struct_setter&& nameToKeyMap_) {
    nameToKeyMap_ref() = std::forward<T_ShmManagerObject_nameToKeyMap_struct_setter>(nameToKeyMap_);
    return __fbthrift_field_nameToKeyMap;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ShmManagerObject>;
  friend void swap(ShmManagerObject& a, ShmManagerObject& b);
};

template <class Protocol_>
unsigned long ShmManagerObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::cachelib::serialization
