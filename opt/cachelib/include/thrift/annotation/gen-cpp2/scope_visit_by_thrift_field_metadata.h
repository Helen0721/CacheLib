/**
 * Autogenerated by Thrift for /mnt/cfs/CacheLib/cachelib/external/fbthrift/thrift/annotation/scope.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/annotation/gen-cpp2/scope_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Transitive> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Transitive");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Program> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Program");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Struct> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Struct");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Union> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Union");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Exception> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Exception");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Field> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Field");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Typedef> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Typedef");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Service> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Service");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Interaction> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Interaction");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Function> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Function");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::EnumValue> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::EnumValue");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Const> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Const");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Enum> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Enum");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Structured> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Structured");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Interface> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Interface");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::RootDefinition> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::RootDefinition");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::Definition> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::Definition");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
