/**
 * Autogenerated by Thrift for /disk/CacheLib/cachelib/external/fbthrift/thrift/annotation/cpp.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <vector>

#include <thrift/lib/cpp2/gen/module_metadata_h.h>
#include "thrift/annotation/gen-cpp2/cpp_types.h"


namespace apache {
namespace thrift {
namespace detail {
namespace md {

template <>
class EnumMetadata<::facebook::thrift::annotation::cpp::RefType>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class EnumMetadata<::facebook::thrift::annotation::cpp::EnumUnderlyingType>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Type>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Ref>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Name>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Lazy>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::DisableLazyChecksum>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Adapter>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::PackIsset>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::MinimizePadding>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::TriviallyRelocatable>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::ScopedEnumAsUnionType>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::StrongType>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::FieldInterceptor>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::UseOpEncode>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::EnumType>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Frozen2Exclude>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::Frozen2RequiresCompleteContainerParams>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::ProcessInEbThreadUnsafe>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
template <>
class StructMetadata<::facebook::thrift::annotation::cpp::RuntimeAnnotation>
    : private EmptyMetadata {
 public:
  using EmptyMetadata::gen;
};
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
