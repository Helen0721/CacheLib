/**
 * Autogenerated by Thrift for /mnt/cfs/CacheLib/cachelib/external/fbthrift/thrift/annotation/cpp.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/annotation/gen-cpp2/cpp_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Type> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).template__ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Type");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Ref> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).type_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Ref");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Name> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).value_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Name");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Lazy> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).ref_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Lazy");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::DisableLazyChecksum> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::DisableLazyChecksum");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Adapter> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).adaptedType_ref());
    case 3:
      return f(2, static_cast<T&&>(t).underlyingName_ref());
    case 4:
      return f(3, static_cast<T&&>(t).extraNamespace_ref());
    case 5:
      return f(4, static_cast<T&&>(t).moveOnly_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Adapter");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::PackIsset> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).atomic_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::PackIsset");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::MinimizePadding> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::MinimizePadding");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::TriviallyRelocatable> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::TriviallyRelocatable");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::ScopedEnumAsUnionType> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::ScopedEnumAsUnionType");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::StrongType> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::StrongType");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::FieldInterceptor> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).noinline_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::FieldInterceptor");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::UseOpEncode> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::UseOpEncode");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::EnumType> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).type_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::EnumType");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Frozen2Exclude> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Frozen2Exclude");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::Frozen2RequiresCompleteContainerParams> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::Frozen2RequiresCompleteContainerParams");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::ProcessInEbThreadUnsafe> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::ProcessInEbThreadUnsafe");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::thrift::annotation::cpp::RuntimeAnnotation> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::facebook::thrift::annotation::cpp::RuntimeAnnotation");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
