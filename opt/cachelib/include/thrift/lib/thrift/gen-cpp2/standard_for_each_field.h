/**
 * Autogenerated by Thrift for /disk/CacheLib/cachelib/external/fbthrift/thrift/lib/thrift/standard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/lib/thrift/gen-cpp2/standard_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::apache::thrift::type::TypeUri> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).uri_ref()...);
    f(1, static_cast<T&&>(t).typeHashPrefixSha2_256_ref()...);
    f(2, static_cast<T&&>(t).scopedName_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::type::TypeName> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).boolType_ref()...);
    f(1, static_cast<T&&>(t).byteType_ref()...);
    f(2, static_cast<T&&>(t).i16Type_ref()...);
    f(3, static_cast<T&&>(t).i32Type_ref()...);
    f(4, static_cast<T&&>(t).i64Type_ref()...);
    f(5, static_cast<T&&>(t).floatType_ref()...);
    f(6, static_cast<T&&>(t).doubleType_ref()...);
    f(7, static_cast<T&&>(t).stringType_ref()...);
    f(8, static_cast<T&&>(t).binaryType_ref()...);
    f(9, static_cast<T&&>(t).enumType_ref()...);
    f(10, static_cast<T&&>(t).typedefType_ref()...);
    f(11, static_cast<T&&>(t).structType_ref()...);
    f(12, static_cast<T&&>(t).unionType_ref()...);
    f(13, static_cast<T&&>(t).exceptionType_ref()...);
    f(14, static_cast<T&&>(t).listType_ref()...);
    f(15, static_cast<T&&>(t).setType_ref()...);
    f(16, static_cast<T&&>(t).mapType_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
