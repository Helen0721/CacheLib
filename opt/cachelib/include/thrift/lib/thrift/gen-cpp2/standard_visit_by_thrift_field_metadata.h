/**
 * Autogenerated by Thrift for /mnt/cfs/CacheLib/cachelib/external/fbthrift/thrift/lib/thrift/standard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/lib/thrift/gen-cpp2/standard_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::apache::thrift::type::TypeUri> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).uri_ref());
    case 2:
      return f(1, static_cast<T&&>(t).typeHashPrefixSha2_256_ref());
    case 3:
      return f(2, static_cast<T&&>(t).scopedName_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::type::TypeUri");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::type::TypeName> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).boolType_ref());
    case 2:
      return f(1, static_cast<T&&>(t).byteType_ref());
    case 3:
      return f(2, static_cast<T&&>(t).i16Type_ref());
    case 4:
      return f(3, static_cast<T&&>(t).i32Type_ref());
    case 5:
      return f(4, static_cast<T&&>(t).i64Type_ref());
    case 6:
      return f(5, static_cast<T&&>(t).floatType_ref());
    case 7:
      return f(6, static_cast<T&&>(t).doubleType_ref());
    case 8:
      return f(7, static_cast<T&&>(t).stringType_ref());
    case 9:
      return f(8, static_cast<T&&>(t).binaryType_ref());
    case 10:
      return f(9, static_cast<T&&>(t).enumType_ref());
    case 17:
      return f(10, static_cast<T&&>(t).typedefType_ref());
    case 11:
      return f(11, static_cast<T&&>(t).structType_ref());
    case 12:
      return f(12, static_cast<T&&>(t).unionType_ref());
    case 13:
      return f(13, static_cast<T&&>(t).exceptionType_ref());
    case 14:
      return f(14, static_cast<T&&>(t).listType_ref());
    case 15:
      return f(15, static_cast<T&&>(t).setType_ref());
    case 16:
      return f(16, static_cast<T&&>(t).mapType_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::type::TypeName");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
