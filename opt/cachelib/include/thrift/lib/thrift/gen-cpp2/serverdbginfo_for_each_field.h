/**
 * Autogenerated by Thrift for /mnt/cfs/CacheLib/cachelib/external/fbthrift/thrift/lib/thrift/serverdbginfo.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/lib/thrift/gen-cpp2/serverdbginfo_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::apache::thrift::serverdbginfo::RequestPileDbgInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).prioritiesCount_ref()...);
    f(2, static_cast<T&&>(t).bucketsPerPriority_ref()...);
    f(3, static_cast<T&&>(t).perBucketRequestLimit_ref()...);
    f(4, static_cast<T&&>(t).totalRequestsLimit_ref()...);
    f(5, static_cast<T&&>(t).queuedRequestsCount_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::serverdbginfo::ConcurrencyControllerDbgInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).concurrencyLimit_ref()...);
    f(2, static_cast<T&&>(t).qpsLimit_ref()...);
    f(3, static_cast<T&&>(t).totalProcessedRequests_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::serverdbginfo::ExecutorDbgInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).threadsCount_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::serverdbginfo::ResourcePoolDbgInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).requestPileDbgInfo_ref()...);
    f(2, static_cast<T&&>(t).concurrencyControllerDbgInfo_ref()...);
    f(3, static_cast<T&&>(t).executorDbgInfo_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::serverdbginfo::CPUConcurrencyControllerDbgInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).mode_ref()...);
    f(1, static_cast<T&&>(t).method_ref()...);
    f(2, static_cast<T&&>(t).cpuTarget_ref()...);
    f(3, static_cast<T&&>(t).cpuLoadSource_ref()...);
    f(4, static_cast<T&&>(t).refreshPeriodMs_ref()...);
    f(5, static_cast<T&&>(t).additiveMultiplier_ref()...);
    f(6, static_cast<T&&>(t).decreaseMultiplier_ref()...);
    f(7, static_cast<T&&>(t).increaseDistanceRatio_ref()...);
    f(8, static_cast<T&&>(t).bumpOnError_ref()...);
    f(9, static_cast<T&&>(t).refractoryPeriodMs_ref()...);
    f(10, static_cast<T&&>(t).initialEstimateFactor_ref()...);
    f(11, static_cast<T&&>(t).initialEstimatePercentile_ref()...);
    f(12, static_cast<T&&>(t).collectionSampleSize_ref()...);
    f(13, static_cast<T&&>(t).concurrencyUpperBound_ref()...);
    f(14, static_cast<T&&>(t).concurrencyLowerBound_ref()...);
    f(15, static_cast<T&&>(t).cpuLoad_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::serverdbginfo::ResourcePoolsDbgInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).enabled_ref()...);
    f(1, static_cast<T&&>(t).resourcePools_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
